{"ast":null,"code":"import{format,parseISO,isValid,formatDistanceToNow}from'date-fns';/**\n * Format currency amount\n */export const formatCurrency=function(amount){let currency=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'USD';let showSign=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const formatter=new Intl.NumberFormat('en-US',{style:'currency',currency:currency,minimumFractionDigits:2,maximumFractionDigits:2});const formatted=formatter.format(Math.abs(amount));if(!showSign){return formatted;}return amount>=0?formatted:\"-\".concat(formatted);};/**\n * Format percentage\n */export const formatPercentage=function(value){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;return\"\".concat(value.toFixed(decimals),\"%\");};/**\n * Format date string\n */export const formatDate=function(dateString){let formatStr=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'MMM dd, yyyy';try{const date=typeof dateString==='string'?parseISO(dateString):dateString;if(!isValid(date)){return'Invalid Date';}return format(date,formatStr);}catch(error){console.error('Error formatting date:',error);return'Invalid Date';}};/**\n * Format relative time (e.g., \"2 hours ago\")\n */export const formatRelativeTime=dateString=>{try{const date=typeof dateString==='string'?parseISO(dateString):dateString;if(!isValid(date)){return'Invalid Date';}return formatDistanceToNow(date,{addSuffix:true});}catch(error){console.error('Error formatting relative time:',error);return'Invalid Date';}};/**\n * Format large numbers with abbreviations (e.g., 1.5K, 2.3M)\n */export const formatNumber=num=>{if(num>=1000000){return(num/1000000).toFixed(1)+'M';}if(num>=1000){return(num/1000).toFixed(1)+'K';}return num.toString();};/**\n * Truncate text with ellipsis\n */export const truncateText=(text,maxLength)=>{if(text.length<=maxLength){return text;}return text.slice(0,maxLength-3)+'...';};/**\n * Get color class for transaction type\n */export const getTransactionColor=type=>{return type==='income'?'text-success-600':'text-error-600';};/**\n * Get background color class for transaction type\n */export const getTransactionBgColor=type=>{return type==='income'?'bg-success-100':'bg-error-100';};/**\n * Get icon for transaction type\n */export const getTransactionIcon=type=>{return type==='income'?'trending-up':'trending-down';};/**\n * Get status color for goals\n */export const getGoalStatusColor=status=>{switch(status){case'completed':return'text-success-600 bg-success-100';case'paused':return'text-warning-600 bg-warning-100';case'active':default:return'text-primary-600 bg-primary-100';}};/**\n * Get progress color based on percentage\n */export const getProgressColor=percentage=>{if(percentage>=100)return'bg-success-500';if(percentage>=75)return'bg-primary-500';if(percentage>=50)return'bg-warning-500';return'bg-gray-300';};/**\n * Format file size\n */export const formatFileSize=bytes=>{if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];};/**\n * Get initials from name\n */export const getInitials=name=>{return name.split(' ').map(word=>word.charAt(0)).join('').toUpperCase().slice(0,2);};/**\n * Validate email format\n */export const isValidEmail=email=>{const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);};/**\n * Generate random color\n */export const generateRandomColor=()=>{const colors=['#EF4444','#F59E0B','#10B981','#3B82F6','#8B5CF6','#EC4899','#F97316','#84CC16','#06B6D4','#6366F1'];return colors[Math.floor(Math.random()*colors.length)];};/**\n * Calculate days between dates\n */export const daysBetween=(date1,date2)=>{const d1=typeof date1==='string'?parseISO(date1):date1;const d2=typeof date2==='string'?parseISO(date2):date2;const diffTime=Math.abs(d2.getTime()-d1.getTime());return Math.ceil(diffTime/(1000*60*60*24));};/**\n * Check if date is in the future\n */export const isFutureDate=dateString=>{try{const date=parseISO(dateString);return date>new Date();}catch(_unused){return false;}};/**\n * Get current date in YYYY-MM-DD format\n */export const getCurrentDateString=()=>{return format(new Date(),'yyyy-MM-dd');};","map":{"version":3,"names":["format","parseISO","isValid","formatDistanceToNow","formatCurrency","amount","currency","arguments","length","undefined","showSign","formatter","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatted","Math","abs","concat","formatPercentage","value","decimals","toFixed","formatDate","dateString","formatStr","date","error","console","formatRelativeTime","addSuffix","formatNumber","num","toString","truncateText","text","maxLength","slice","getTransactionColor","type","getTransactionBgColor","getTransactionIcon","getGoalStatusColor","status","getProgressColor","percentage","formatFileSize","bytes","k","sizes","i","floor","log","parseFloat","pow","getInitials","name","split","map","word","charAt","join","toUpperCase","isValidEmail","email","emailRegex","test","generateRandomColor","colors","random","daysBetween","date1","date2","d1","d2","diffTime","getTime","ceil","isFutureDate","Date","_unused","getCurrentDateString"],"sources":["/workspace/frontend/src/utils/formatters.ts"],"sourcesContent":["import { format, parseISO, isValid, formatDistanceToNow } from 'date-fns';\n\n/**\n * Format currency amount\n */\nexport const formatCurrency = (\n  amount: number, \n  currency: string = 'USD',\n  showSign: boolean = true\n): string => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  });\n\n  const formatted = formatter.format(Math.abs(amount));\n  \n  if (!showSign) {\n    return formatted;\n  }\n\n  return amount >= 0 ? formatted : `-${formatted}`;\n};\n\n/**\n * Format percentage\n */\nexport const formatPercentage = (\n  value: number, \n  decimals: number = 1\n): string => {\n  return `${value.toFixed(decimals)}%`;\n};\n\n/**\n * Format date string\n */\nexport const formatDate = (\n  dateString: string | Date,\n  formatStr: string = 'MMM dd, yyyy'\n): string => {\n  try {\n    const date = typeof dateString === 'string' ? parseISO(dateString) : dateString;\n    \n    if (!isValid(date)) {\n      return 'Invalid Date';\n    }\n\n    return format(date, formatStr);\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Invalid Date';\n  }\n};\n\n/**\n * Format relative time (e.g., \"2 hours ago\")\n */\nexport const formatRelativeTime = (dateString: string | Date): string => {\n  try {\n    const date = typeof dateString === 'string' ? parseISO(dateString) : dateString;\n    \n    if (!isValid(date)) {\n      return 'Invalid Date';\n    }\n\n    return formatDistanceToNow(date, { addSuffix: true });\n  } catch (error) {\n    console.error('Error formatting relative time:', error);\n    return 'Invalid Date';\n  }\n};\n\n/**\n * Format large numbers with abbreviations (e.g., 1.5K, 2.3M)\n */\nexport const formatNumber = (num: number): string => {\n  if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  }\n  if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'K';\n  }\n  return num.toString();\n};\n\n/**\n * Truncate text with ellipsis\n */\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (text.length <= maxLength) {\n    return text;\n  }\n  return text.slice(0, maxLength - 3) + '...';\n};\n\n/**\n * Get color class for transaction type\n */\nexport const getTransactionColor = (type: 'income' | 'expense'): string => {\n  return type === 'income' ? 'text-success-600' : 'text-error-600';\n};\n\n/**\n * Get background color class for transaction type\n */\nexport const getTransactionBgColor = (type: 'income' | 'expense'): string => {\n  return type === 'income' ? 'bg-success-100' : 'bg-error-100';\n};\n\n/**\n * Get icon for transaction type\n */\nexport const getTransactionIcon = (type: 'income' | 'expense'): string => {\n  return type === 'income' ? 'trending-up' : 'trending-down';\n};\n\n/**\n * Get status color for goals\n */\nexport const getGoalStatusColor = (status: 'active' | 'completed' | 'paused'): string => {\n  switch (status) {\n    case 'completed':\n      return 'text-success-600 bg-success-100';\n    case 'paused':\n      return 'text-warning-600 bg-warning-100';\n    case 'active':\n    default:\n      return 'text-primary-600 bg-primary-100';\n  }\n};\n\n/**\n * Get progress color based on percentage\n */\nexport const getProgressColor = (percentage: number): string => {\n  if (percentage >= 100) return 'bg-success-500';\n  if (percentage >= 75) return 'bg-primary-500';\n  if (percentage >= 50) return 'bg-warning-500';\n  return 'bg-gray-300';\n};\n\n/**\n * Format file size\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * Get initials from name\n */\nexport const getInitials = (name: string): string => {\n  return name\n    .split(' ')\n    .map(word => word.charAt(0))\n    .join('')\n    .toUpperCase()\n    .slice(0, 2);\n};\n\n/**\n * Validate email format\n */\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * Generate random color\n */\nexport const generateRandomColor = (): string => {\n  const colors = [\n    '#EF4444', '#F59E0B', '#10B981', '#3B82F6', '#8B5CF6',\n    '#EC4899', '#F97316', '#84CC16', '#06B6D4', '#6366F1'\n  ];\n  return colors[Math.floor(Math.random() * colors.length)];\n};\n\n/**\n * Calculate days between dates\n */\nexport const daysBetween = (date1: string | Date, date2: string | Date): number => {\n  const d1 = typeof date1 === 'string' ? parseISO(date1) : date1;\n  const d2 = typeof date2 === 'string' ? parseISO(date2) : date2;\n  \n  const diffTime = Math.abs(d2.getTime() - d1.getTime());\n  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n};\n\n/**\n * Check if date is in the future\n */\nexport const isFutureDate = (dateString: string): boolean => {\n  try {\n    const date = parseISO(dateString);\n    return date > new Date();\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Get current date in YYYY-MM-DD format\n */\nexport const getCurrentDateString = (): string => {\n  return format(new Date(), 'yyyy-MM-dd');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}