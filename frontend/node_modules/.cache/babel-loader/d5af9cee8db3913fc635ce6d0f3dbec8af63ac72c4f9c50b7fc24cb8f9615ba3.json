{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'/api';// Create axios instance\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Types\n// Transaction API\nexport const transactionAPI={getAll:params=>{return api.get('/transactions',{params});},getById:id=>{return api.get(\"/transactions/\".concat(id));},create:transaction=>{return api.post('/transactions',transaction);},update:(id,transaction)=>{return api.put(\"/transactions/\".concat(id),transaction);},delete:id=>{return api.delete(\"/transactions/\".concat(id));}};// Category API\nexport const categoryAPI={getAll:()=>{return api.get('/categories');},getById:id=>{return api.get(\"/categories/\".concat(id));},create:category=>{return api.post('/categories',category);},update:(id,category)=>{return api.put(\"/categories/\".concat(id),category);},delete:id=>{return api.delete(\"/categories/\".concat(id));}};// Goal API\nexport const goalAPI={getAll:()=>{return api.get('/goals');},getById:id=>{return api.get(\"/goals/\".concat(id));},create:goal=>{return api.post('/goals',goal);},update:(id,goal)=>{return api.put(\"/goals/\".concat(id),goal);},updateProgress:(id,amount)=>{return api.patch(\"/goals/\".concat(id,\"/progress\"),{amount});},delete:id=>{return api.delete(\"/goals/\".concat(id));}};// Dashboard API\nexport const dashboardAPI={getData:function(){let period=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'month';return api.get('/dashboard',{params:{period}});},getAnalytics:params=>{return api.get('/dashboard/analytics',{params});}};// Upload API\nexport const uploadAPI={uploadCSV:function(file){let autoCategorize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const formData=new FormData();formData.append('file',file);formData.append('auto_categorize',autoCategorize.toString());return api.post('/upload/csv',formData,{headers:{'Content-Type':'multipart/form-data'}});},validateCSV:file=>{const formData=new FormData();formData.append('file',file);return api.post('/upload/validate',formData,{headers:{'Content-Type':'multipart/form-data'}});},getUploadHistory:()=>{return api.get('/upload/history');}};// Health check\nexport const healthAPI={check:()=>{return api.get('/health');}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","transactionAPI","getAll","params","get","getById","id","concat","transaction","post","update","put","delete","categoryAPI","category","goalAPI","goal","updateProgress","amount","patch","dashboardAPI","getData","period","arguments","length","undefined","getAnalytics","uploadAPI","uploadCSV","file","autoCategorize","formData","FormData","append","toString","validateCSV","getUploadHistory","healthAPI","check"],"sources":["/workspace/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Types\nexport interface Transaction {\n  id: number;\n  amount: number;\n  description: string;\n  category_id: number | null;\n  category_name?: string;\n  category_color?: string;\n  category_icon?: string;\n  type: 'income' | 'expense';\n  date: string;\n  created_at: string;\n}\n\nexport interface Category {\n  id: number;\n  name: string;\n  color: string;\n  icon: string;\n  transaction_count?: number;\n  total_expenses?: number;\n  total_income?: number;\n  created_at: string;\n}\n\nexport interface Goal {\n  id: number;\n  title: string;\n  target_amount: number;\n  current_amount: number;\n  category_id: number | null;\n  category_name?: string;\n  category_color?: string;\n  category_icon?: string;\n  target_date: string | null;\n  status: 'active' | 'completed' | 'paused';\n  progress_percentage: number;\n  created_at: string;\n}\n\nexport interface DashboardData {\n  summary: {\n    total_income: number;\n    total_expenses: number;\n    net_income: number;\n    total_transactions: number;\n    savings_rate: number;\n  };\n  comparison: {\n    current_month: { income: number; expenses: number };\n    previous_month: { income: number; expenses: number };\n    income_change: number;\n    expense_change: number;\n  };\n  category_spending: Array<{\n    name: string;\n    color: string;\n    icon: string;\n    total_amount: number;\n    transaction_count: number;\n  }>;\n  recent_transactions: Transaction[];\n  daily_trend: Array<{\n    date: string;\n    income: number;\n    expenses: number;\n  }>;\n  goals_summary: {\n    total_goals: number;\n    active_goals: number;\n    completed_goals: number;\n    avg_progress: number;\n  };\n  period: string;\n}\n\n// Transaction API\nexport const transactionAPI = {\n  getAll: (params?: {\n    category?: string;\n    type?: string;\n    startDate?: string;\n    endDate?: string;\n    page?: number;\n    limit?: number;\n  }) => {\n    return api.get<{\n      transactions: Transaction[];\n      pagination: {\n        page: number;\n        limit: number;\n        total: number;\n        pages: number;\n      };\n    }>('/transactions', { params });\n  },\n\n  getById: (id: number) => {\n    return api.get<Transaction>(`/transactions/${id}`);\n  },\n\n  create: (transaction: Omit<Transaction, 'id' | 'created_at'>) => {\n    return api.post<Transaction>('/transactions', transaction);\n  },\n\n  update: (id: number, transaction: Partial<Transaction>) => {\n    return api.put<Transaction>(`/transactions/${id}`, transaction);\n  },\n\n  delete: (id: number) => {\n    return api.delete(`/transactions/${id}`);\n  },\n};\n\n// Category API\nexport const categoryAPI = {\n  getAll: () => {\n    return api.get<Category[]>('/categories');\n  },\n\n  getById: (id: number) => {\n    return api.get<Category>(`/categories/${id}`);\n  },\n\n  create: (category: Omit<Category, 'id' | 'created_at'>) => {\n    return api.post<Category>('/categories', category);\n  },\n\n  update: (id: number, category: Partial<Category>) => {\n    return api.put<Category>(`/categories/${id}`, category);\n  },\n\n  delete: (id: number) => {\n    return api.delete(`/categories/${id}`);\n  },\n};\n\n// Goal API\nexport const goalAPI = {\n  getAll: () => {\n    return api.get<Goal[]>('/goals');\n  },\n\n  getById: (id: number) => {\n    return api.get<Goal>(`/goals/${id}`);\n  },\n\n  create: (goal: Omit<Goal, 'id' | 'created_at' | 'progress_percentage'>) => {\n    return api.post<Goal>('/goals', goal);\n  },\n\n  update: (id: number, goal: Partial<Goal>) => {\n    return api.put<Goal>(`/goals/${id}`, goal);\n  },\n\n  updateProgress: (id: number, amount: number) => {\n    return api.patch<Goal>(`/goals/${id}/progress`, { amount });\n  },\n\n  delete: (id: number) => {\n    return api.delete(`/goals/${id}`);\n  },\n};\n\n// Dashboard API\nexport const dashboardAPI = {\n  getData: (period: 'week' | 'month' | 'year' | 'all' = 'month') => {\n    return api.get<DashboardData>('/dashboard', { params: { period } });\n  },\n\n  getAnalytics: (params?: {\n    category?: string;\n    startDate?: string;\n    endDate?: string;\n  }) => {\n    return api.get('/dashboard/analytics', { params });\n  },\n};\n\n// Upload API\nexport const uploadAPI = {\n  uploadCSV: (file: File, autoCategorize: boolean = true) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('auto_categorize', autoCategorize.toString());\n\n    return api.post('/upload/csv', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n\n  validateCSV: (file: File) => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    return api.post('/upload/validate', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n\n  getUploadHistory: () => {\n    return api.get('/upload/history');\n  },\n};\n\n// Health check\nexport const healthAPI = {\n  check: () => {\n    return api.get('/health');\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}